#!/usr/bin/env python2
# -*- coding: utf-8 -*-
#
#  Copyright 2013-2017 Alex Vesev <alex.vesev@gmail.com>
#
#  This file is part of Packages List Processor - PLP.
#
#  PLP is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  PLP is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with PLP.  If not, see <http://www.gnu.org/licenses/>.
#
##


import sys
sys.dont_write_bytecode = True
sys.path.append("/opt/plp")

import yaml
import argparse
from journal import l
import traceback


def get_cli_args():
    mainHelpText = "No documentation has been created."
    parser = argparse.ArgumentParser(description=mainHelpText)
    parser.add_argument('--in',
                        dest='file_input',
                        action='store',
                        required=True,
                        help="File to read from.")
    parser.add_argument('--distro',
                        dest='distro',
                        choices=['any','Ubuntu','Fedora','Arch'],
                        action='store',
                        required=True,
                        help="Distribution name.")
    parser.add_argument('--version',
                        dest='version',
                        default='any',
                        action='store',
                        help="Distribution version.")
    parser.add_argument('--tags-ommit',
                        dest='tags_ommit',
                        default=[],
                        nargs='+',
                        action='append',
                        help="Items with the tags will be ommited.")
    parser.add_argument('--tags',
                        dest='tags_include',
                        default=[],
                        nargs='+',
                        action='append',
                        help="Only items with the tags will be included.")
    parser.add_argument('--verbose',
                        dest='is_verbose',
                        action='store_true',
                        help="Be verbose.")

    args = parser.parse_args()

    args.tags_include = set(sorted([x for y in args.tags_include for x in y]))
    args.tags_ommit = set(sorted([x for y in args.tags_ommit for x in y]))

    return args


def main(cli_args):
    l.info("Input is:  {}".format(cli_args.file_input))

    with open(cli_args.file_input, "r") as fh:
        packs_desc = yaml.load(fh)

    packs_list = sorted([i
                         for i in packs_desc["packs"]
                         if i["enabled"]
                         if cli_args.distro+"/"+cli_args.version
                                          not in [x["name"]+"/"+x["version"]
                                                  for x in i["none_in"]]])  # Drop records disabled, records for other distros.
    if cli_args.tags_include:
        packs_list = [i
                      for i in packs_list
                      if "tags" in i
                      if [x for x in cli_args.tags_include
                          if x in i["tags"]]]  # Filter items with desired tags only.

    if cli_args.tags_ommit:
        packs_list = [i
                      for i in packs_list
                      if "tags" in i and not [x for x in cli_args.tags_ommit
                              if x in i["tags"]] or "tags" not in i]  # Drop items with tags selected as ommited.

    packs_list_string = ' '.join([i["name"] for i in packs_list])

    if packs_list_string:
        l.info("Quantity of selected records: {}".format(len(packs_list)))
        if cli_args.distro == "any":
            print(packs_list_string)
        elif cli_args.distro == "Ubuntu":
            print("sudo apt-get update &&"
                  + " sudo apt-get install --dry-run --download-only"
                  + " {}".format(packs_list_string))
        else:
            assert False, "Unimplemented functionality"\
                          + "'{}'".format(cli_args.distro)
    else:
        l.warning("No package names have been filtered at all.")

    return packs_list


if __name__ == '__main__':
    try:
        cli_args = get_cli_args()
        main(cli_args)
    except Exception as e:
        l.error("Had error.\n".format(traceback.format_exc(e)))
        l.error(traceback.format_exc(e))
        exit(1)
    l.info("Job done.\n")
