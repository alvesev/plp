#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
#  Copyright 2013-2018 Alex Vesev <alex.vesev@gmail.com>
#
#  This file is part of Packages List Processor - PLP.
#
#  PLP is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  PLP is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with PLP.  If not, see <http://www.gnu.org/licenses/>.
#
##


import sys
sys.dont_write_bytecode = True
sys.path.append("/opt/plp")


import yaml
import argparse
from journal import l
import traceback


def get_cli_args():
    mainHelpText = "No documentation has been created."
    parser = argparse.ArgumentParser(description=mainHelpText)
    parser.add_argument('--in',
                        dest='file_input',
                        default=True,
                        action='store',
                        required=True,
                        help="File to read from.")
    parser.add_argument('--state',
                        dest='state',
                        choices=['any','enabled','disabled'],
                        default='any',
                        action='store',
                        help="Select records to be listed.")
    parser.add_argument('--verbose',
                        dest='is_verbose',
                        action='store_true',
                        help="Be verbose.")

    args = parser.parse_args()
    return args


def main(cli_args):
    l.info("Input is:  {}".format(cli_args.file_input))
    with open(cli_args.file_input, "r") as fh:
        packs_desc = yaml.load(fh)

    if cli_args.state == "any":
        print('\n'.join(["{} :::: {}".format(i["name"], i["comment"])
                for i in packs_desc["packs"]]))
    elif cli_args.state == "enabled":
        print('\n'.join(["{} :::: {}".format(i["name"], i["comment"])
                for i in packs_desc["packs"] if i["enabled"]]))
    elif cli_args.state == "disabled":
        print('\n'.join(["{} :::: {}".format(i["name"], i["comment"])
                for i in packs_desc["packs"] if not i["enabled"]]))

if __name__ == '__main__':
    try:
        cli_args = get_cli_args()
        main(cli_args)
    except Exception as e:
        l.error("Had error.\n".format(traceback.format_exc(e)))
        l.error(traceback.format_exc(e))
        exit(1)
    l.info("Job done.\n")
